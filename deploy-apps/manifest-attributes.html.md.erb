---
title: App Manifest Attribute Reference
owner: CLI
---

This topic describes manifest formatting and provides a full list of attributes available for app manifests. You can use it alongside the [Deploying with App Manifests](./manifest.html) topic, which provides basic procedures and guidance for deploying apps with manifests.

For more information about V3 manifest properties, see the [Cloud Foundry API (CAPI) V3 documentation](http://v3-apidocs.cloudfoundry.org/index.html#space-manifest).

## <a id='minimal-manifest'></a> Manifest Format

Manifests are written in YAML. The manifest below illustrates some YAML conventions, as follows:

* The manifest begins with three dashes.
* The `version` property specifies a manifest schema version. This property is optional.
  For more information, see [Add Schema Version to a Manifest](#manifest-schema-version) below.
* The `applications` block begins with a heading followed by a colon.
* The app `name` is preceded by a single dash and one space.
* Subsequent lines in the block are indented two spaces to align with `name`.

<pre>
---
version: 1
applications:
- name: my-app
  memory: 512M
  instances: 2
</pre>

<p class="note"><strong>Note</strong>: If your app name begins with the dash character (<code>-</code>), you cannot interact with the app using the cf CLI. This is because the cf CLI interprets the dash as a flag.</p>

### <a id='manifest-schema-version'></a> Add Schema Version to a Manifest

<%= partial 'v3-note' %>

You can specify the schema version in the `versions` property of the manifest.
This property is optional.

The only supported version is `1`.
If not specified, the `versions` property defaults to `1`.

### <a id='variable-substitution'></a> Add Variables to a Manifest

You can use variables to create app manifests with values shared across all applicable environments in combination with references to environment-specific differences defined in separate files.

In addition, using variables enables you to store sensitive data in a separate file that the app manifest would reference, making the security sensitive data easier to manage and keep secure.

To add variables to an app manifest, do the following:

1. Create a file called `vars.yml`.

1. Add attributes to your `vars.yml` file. See the following example:

    ```
    instances: 2
    memory: 1G
    ```

1. Add the variables to your app manifest file using the following format: `((VARIABLE-NAME))`. See the following example:

    ```
    ---
    applications:
    - name: test-app
      instances: ((instances))
      memory: ((memory))
      buildpacks:
      - go_buildpack
      env:
        GOPACKAGENAME: go_calls_ruby
      command: go_calls_ruby
    ```

    <p class="note"><strong>Note</strong>: You can also use variables for partial values. For example, you can specify <code>host</code> in your variables file and <code>- route: ((host)).env.com</code> in your manifest file.</p>

1. Run `cf push`:

    ```
    cf push --vars-file /PATH/vars.yml
    ```
    Where `PATH` is the path to the file you created.

### <a id='minimize-duplication'></a> Minimize Duplication with YAML Anchors

<p class='note'><strong>Note:</strong> Top-level attributes have been deprecated in favor of YAML anchors. For more information, see <a href=#deprecated>Deprecated App Manifest Features</a>.</p>

In manifests where multiple apps share settings or services, you may see duplicated content. While the manifests still work, duplication increases the risk of typographical errors, which cause deployments to fail.

You can declare shared configuration using a YAML anchor, which the manifest refers to in app declarations by using an alias.

<pre>
---
defaults: &amp;defaults
  buildpacks:
    - staticfile_buildpack
  memory: 1G


applications:
- name: bigapp
  &lt;&lt;: *defaults
- name: smallapp
  &lt;&lt;: *defaults
  memory: 256M
</pre>

This manifest pushes two apps, smallapp and bigapp, with the staticfile buildpack but with 256M memory for smallapp and 1G for bigapp.




## <a id='optional-attributes'></a> Application Attributes

This section explains how to describe optional app attributes in manifests. Each of these attributes can also be specified by a command line option. Command line options override the manifest.

<p class='note'><strong>Note:</strong> In cf CLI v6, the route component attributes <code>domain</code>, <code>domains</code>, <code>host</code>, <code>hosts</code>, and <code>no-hostname</code> have been deprecated in favor of the <code>routes</code> attribute. In cf CLI v7, these attributes are removed. For more information, see <a href=#deprecated>Deprecated App Manifest Features</a>.</p>

### <a id='buildpack'></a> buildpacks

You can refer to a buildpack by name in a manifest or a command line option. The <code>cf buildpacks</code> command lists the buildpacks that you can use.

See below for information on referencing buildpacks in a manifest. The command line option that overrides this attribute is `-b`.

* **Custom buildpacks**: If your app requires a custom buildpack, you can use the `buildpacks` attribute to specify it in a number of ways:
  * By name: `MY-BUILDPACK`.
  * By GitHub URL: `https://github.com/cloudfoundry/java-buildpack.git`.
  * By GitHub URL with a branch or tag: `https://github.com/cloudfoundry/java-buildpack.git#v3.3.0` for the `v3.3.0` tag.

      ```
      ---
        ...
        buildpacks:
          - buildpack_URL
      ```
* **Multiple buildpacks**: If you are using multiple buildpacks, you can provide an additional `-b` flag or add an additional value to your manifest:

      ```
      ---
        ...
        buildpacks:
          - buildpack_URL
          - buildpack_URL
      ```

      <p class="note"><strong>Note</strong>: This feature does not work with <a href=#deprecated>Deprecated App Manifest Features</a>.</p>

      <p class="note"><strong>Note</strong>: You must specify multiple buildpacks in the correct order: the buildpack will use the app start command given by the final buildpack. See <a href=https://github.com/cloudfoundry/multi-buildpack#usageapp>the multi-buildpack repository</a> for more information.</p>

Also see [Pushing an App with Multiple Buildpacks](https://docs.cloudfoundry.org/buildpacks/use-multiple-buildpacks.html) for more information.

### <a id='start-commands'></a> command

Some languages and frameworks require that you provide a custom command to start an app. Refer to the [buildpack](../../buildpacks/index.html) documentation to determine if you need to provide a custom start command.

You can provide the custom start command in your app manifest or on the command line. See <a href="./start-restart-restage.html">Starting, Restarting, and Restaging Apps</a> for more information about how Cloud Foundry determines its default start command.

To specify the custom start command in your app manifest, add it in the `command: START-COMMAND` format as the following example shows:

<pre>
---
  ...
  command: bundle exec rake VERBOSE=true
</pre>

The start command you specify becomes the default for your app. To return to using the original default start command set by your buildpack, you must explicitly set the attribute to `null` as follows:


<pre>
---
  ...
  command: null
</pre>

On the command line, use the `-c` option to specify the custom start command as the following example shows:

<pre class="terminal">
$ cf push my-app -c "bundle exec rake VERBOSE=true"
</pre>

<p class="note"><strong>Note</strong>: The <code>-c</code> option with a value of 'null' forces <code>cf push</code> to use the buildpack start command. See <a href="./start-restart-restage.html#revert">Forcing cf push to use the Buildpack Start Command</a> for more information.</p>

If you override the start command for a Buildpack app, Linux uses
<code>bash -c YOUR-COMMAND</code> to invoke your app.
If you override the start command for a Docker app, Linux uses <code>sh -c YOUR-COMMAND</code> to invoke your app.
Because of this, if you override a start command, you should prefix <code>exec</code> to the final command in your custom composite start command.

An app needs to catch [termination signals](./prepare-to-deploy.html#moving-apps) and clean itself up appropriately. Because of the way that shells manage process trees, the use of custom composite shell commands, particularly those that create child processes using `&`, `&&`, `||`, etc., can prevent your app from receiving signals that are sent to the top level bash process.

To resolve this issue, you can use `exec` to replace the bash process with your own process. For example:

  * `bin/rake cf:on_first_instance db:migrate && bin/rails server -p $PORT -e $RAILS_ENV` The process tree is bash -> ruby, so on graceful shutdown only the bash process receives the TERM signal, not the ruby process.

  * `bin/rake cf:on_first_instance db:migrate && exec bin/rails server -p $PORT -e $RAILS_ENV` Because of the `exec` prefix included on the final command, the ruby process invoked by rails takes over the bash process managing the execution of the composite command. The process tree is only ruby, so the ruby web server receives the TERM signal and can shutdown gracefully for 10 seconds.

In more complex situations, like making a custom buildpack, you may want to use bash `trap`, `wait`, and backgrounded processes to manage your process tree and shut down apps gracefully. In most situations, however, a well-placed `exec` should be sufficient.

### <a id='disk-quota'></a> disk_quota

Use the `disk_quota` attribute to allocate the disk space for your app instance. This attribute requires a unit of measurement: `M`, `MB`, `G`, or `GB`, in upper case or lower case.

<pre>
---
  ...
  disk_quota: 1024M
</pre>

The command line option that overrides this attribute is `-k`.

### <a id='docker'></a> docker

If your app is contained in a Docker image, then you may use the `docker` attribute to specify it and an optional Docker username.

This attribute is a combination of `push` options that include `--docker-image` and `--docker-username`.

<pre>
---
  ...
  docker:
    image: docker-image-repository/docker-image-name
    username: docker-user-name
</pre>

The command line option `--docker-image` or `-o` overrides `docker.image`.  The command line option `--docker-username` overrides `docker.username`.

The manifest attribute `docker.username` is optional.  If it is used, then the password must be provided in the environment variable `CF_DOCKER_PASSWORD`.  Additionally, if a Docker username is specified, then a Docker image must also be specified.

<p class="note"><strong>Note</strong>: Using the <code>docker</code> attribute in conjunction with the <code>buildpacks</code> or <code>path</code> attributes will result in an error.</p>


### <a id='health-check-http-endpoint'></a> health-check-http-endpoint

Use the `health-check-http-endpoint` attribute to customize the endpoint for the `http` health check type. If you do not provide a `health-check-http-endpoint` attribute,
it uses endpoint `/`.

<pre>
---
  ...
  health-check-type: http
  health-check-http-endpoint: /health
</pre>

### <a id='health-check-invocation-timeout'></a> health-check-invocation-timeout

Use the `health-check-invocation-timeout` attribute to set the timeout in seconds for individual health check requests for HTTP and port health checks.

<pre>
---
  ...
  health-check-invocation-timeout: 30
</pre>

The cf CLI command that overrides this attribute is `cf set-health-check my-web-app http --invocation-timeout 10`.

Within the manifest, the health check timeout is controlled by the `timeout` attribute.

### <a id='health-check-type'></a> health-check-type

Use the `health-check-type` attribute to set the `health_check_type` flag to either `port`, `process` or `http`. If you do not provide a `health-check-type` attribute,
it defaults to `port`.

<pre>
---
  ...
  health-check-type: port
</pre>

The command line option that overrides this attribute is `-u`.

In cf CLI v6, the value of `none` is deprecated in favor of `process`. In cf CLI v7, `none` is removed.

### <a id='instances'></a> instances

Use the `instances` attribute to set the number of app instances.

<pre>
---
  ...
  instances: 2
</pre>

The default number of instances is 1.

To ensure that platform maintenance does not interrupt your app, run at least two instances.

### <a id='memory'></a> memory

Use the `memory` attribute to specify the memory limit for all instances of an app. This attribute requires a unit of measurement: `M`, `MB`, `G`, or `GB`, in upper case or lower case. For example:

<pre>
---
  ...
  memory: 1024M
</pre>

The default memory limit is 1G. You might want to specify a smaller limit to conserve <%= vars.quota_resource %> if you know that your app instances do not require 1G of memory.

The command line option that overrides this attribute is `-m`.

### <a id='metadata'></a> metadata

Use the `metadata` information to tag your apps with additional information. You can specify two types of metadata: `labels` and `annotations`. For more information, see [Types of Metadata](../../adminguide/metadata.html#types) in _Using Metadata_.

See the following example:

```
metadata:
  annotations:
    contact: "bob@example.com jane@example.com"
  labels:
    sensitive: true
```

For more information about metadata, see [Using Metadata](../../adminguide/metadata.html).

### <a id='no-route'></a>no-route

<p class="note"><strong>Note</strong>: If you use the `no-route` flag attribute in the manifest or the flag option, it will override all route-related attributes.</p>

By default, `cf push` assigns a route to every app. But, some apps process data while running in the background and should not be assigned routes.

You can use the `no-route` attribute with a value of `true` to prevent a route from being created for your app.

<pre>
---
  ...
  no-route: true
</pre>
The command line option that overrides this attribute is `--no-route`.

In the Diego architecture, `no-route` skips creating and binding a route for the app, but does not specify which type of health check to perform. If your app does not listen on a port because it is a worker or a scheduler app, then it does not satisfy the port-based health check and Cloud Foundry marks it as crashed. To prevent this, disable the port-based health check with `cf set-health-check APP_NAME process`.

To remove a route from an existing app, perform the following steps:

1. Remove the route using the `cf unmap-route` command.
1. Push the app again with the `no-route: true` attribute in the manifest or the `--no-route` command line option.

For more information, see [Deploy Multiple Apps with One Manifest](manifest.html#multi-apps).

### <a id='path'></a> path

You can use the `path` attribute to tell Cloud Foundry the directory location where it can find your app.

The directory specified as the `path`, either as an attribute or as a parameter on the command line, becomes the location where the buildpack `Detect` script executes.

The command line option that overrides this attribute is `-p`.

<pre>
---
  ...
  path: /path/to/app/bits
</pre>

For more information, see [How cf push Finds the App](../../cf-cli/getting-started.html#find-app).

### <a id='processes'></a> processes

<%= partial 'v3-note' %>

Use the `processes` attribute to push apps that run multiple processes, such as a web app that has a UI process and a worker process. See the following example:

```
processes:
- type: web
  command: start-web.sh
  disk_quota: 512M
  health-check-http-endpoint: /healthcheck
  health-check-type: http
  health-check-invocation-timeout: 10
  instances: 3
  memory: 500M
  timeout: 10
- type: worker
  command: start-worker.sh
  disk_quota: 1G
  health-check-type: process
  instances: 2
  memory: 256M
  timeout: 15
```

For detailed information about the process-level configuration, see [The app manifest specification](https://v3-apidocs.cloudfoundry.org/version/3.76.0/index.html#app-manifest) in the CAPI documentation.

For more information about pushing an app with multiple processes, see [Pushing an App with Multiple Processes](../multiple-processes.html).

### <a id='random-route'></a> random-route

If you push your app without specifying any route-related CLI options or app manifest flags, the cf CLI attempts to generate a route based on the app name, which can cause collisions.

You can use the `random-route` attribute to generate a unique route and avoid name collisions.
When you use `random-route`, the cf CLI generates an HTTP route with a random host (if `host` is not set) or a TCP route with an unused port number.

See the following example use cases:

* You deploy the same app to multiple spaces for testing purposes. In this situation, you can use `random-route` to randomize routes declared with the route attribute in the app manifest.
* You use an app manifest for a classroom training exercise in which multiple users deploy the same app to the same space.

The command line option that overrides this attribute is `--random-route`.

<pre>
---
  ...
  random-route: true
</pre>

### <a id='routes'></a> routes

Use the `routes` attribute to provide multiple HTTP and TCP routes. Each route for this app is created if it does not already exist.

This attribute is a combination of `push` options that include `--hostname`, `-d`, and `--route-path`.

Optionally, specify the `protocol` attribute to configure which network protocol the route uses for app ingress traffic. The available protocols are `http2`, `http1`, and `tcp`.

<p class="note"><strong>Note</strong>: The <code>protocol</code> route attribute is only available for <%= vars.app_runtime_abbr %> deployments with HTTP/2 routing enabled. <%= vars.http2_admin_link %> </p>

<pre>
---
  ...
  routes:
  - route: example.com
    protocol: http2
  - route: www.example.com/foo
  - route: tcp-example.com:1234
</pre>

#### <a id='manifest-attibutes-2'></a> Manifest Attributes
The `routes` attribute cannot be used in conjunction with the following attributes: `host`, `hosts`, `domain`, `domains`, and `no-hostname`. An error will result.

#### <a id='push-flag-options'></a> Push Flag Options
This attribute has unique interactions with different command line options.
<table border="1" class="nice" >
<tr>
<th>Push Flag Option</th>
<th>Resulting Behaviour</th>
</tr>
<tr>
<td><code>--no-route</code></td>
<td>All declared routes are ignored.</td>
</tr>
<tr>
<td><code>-d</code></td>
<td>Overrides DOMAIN part of all declared HTTP and TCP routes.</td>
</tr>
<tr>
<td><code>--hostname, -n</code></td>
<td>Sets or overrides HOSTNAME in all HTTP routes. <br />
It has no impact on TCP routes.</td>
</tr>
<tr>
<td><code>--route-path</code></td>
<td>Sets or overrides the PATH in all HTTP routes.<br />
It has no impact on TCP routes.</td>
</tr>
<tr>
<td><code>--random-route</code></td>
<td>Sets or overrides the HOSTNAME in all HTTP routes.<br />
Sets or overrides the PORT in all TCP routes.<br />
The PORT and HOSTNAME will be randomly generated.</td>
</tr>
<tr>
</table>

### <a id='sidecars'></a> sidecars

<%= partial 'v3-note' %>

Use the `sidecars` attribute to specify additional processes to run in the same container as your app. Each sidecar must have values for `name`, `process_types`, and `command`, whereas `memory` is optional. See the following example:

```
sidecars:
- name: authenticator
  process_types: [ 'web', 'worker' ]
  command: bundle exec run-authenticator
  memory: 800M
- name: upcaser
  process_types: [ 'worker' ]
  command: ./tr-server
  memory: 900M
```

For more information about sidecars, see [Pushing Apps with Sidecar Processes](../sidecars.html).

### <a id='stack'></a> stack

Use the `stack` attribute to specify which stack to deploy your app to.

To see a list of available stacks, run `cf stacks` from the cf CLI.

<pre>
---
  ...
  stack: cflinuxfs3
</pre>

The command line option that overrides this attribute is `-s`.

### <a id='timeout'></a> timeout

The `timeout` attribute defines the number of seconds that Cloud Foundry allocates for starting your app. It is related to the `health-check-type` attribute.

For example:

<pre>
---
  ...
  timeout: 80
</pre>

You can increase the timeout length for very large apps that require more time to start. The `timeout` attribute defaults to 60, but you can set it to any value up to the Cloud Controller's `cc.maximum_health_check_timeout` property.

<%= vars.max_healthcheck_timeout %>

The command line option that overrides the timeout attribute is `-t`.

<p class="warning note"><strong>Warning:</strong> Cloud Controller reports a validation error
   with the maximum limit if you configure <code>timeout</code> with a value greater than
   <code>cc.maximum_health_check_timeout</code>.
</p>


## <a id='env-block'></a> Environment Variables

The `env` block consists of a heading, then one or more environment variable/value pairs.

For example:

<pre>
---
  ...
  env:
    RAILS_ENV: production
    RACK_ENV: production
</pre>

`cf push` deploys the app to a container on the server. The variables belong to the container environment.

<p class="note"><strong>Note</strong>: You must name variables with alphanumeric characters and underscores. Non-conforming variable names may cause unpredictable behavior.</p>


While the app is running, you can modify environment variables.

* View all variables: `cf env my-app`
* Set an individual variable: `cf set-env my-app my-variable_name my-variable_value`
* Unset an individual variable: `cf unset-env my-app my-variable_name my-variable_value`

Environment variables interact with manifests in the following ways:

* When you deploy an app for the first time, Cloud Foundry reads the variables described in the environment block of the manifest and adds them to
the environment of the container where the app is staged, and the environment of the container where the app is deployed.

* When you stop and then restart an app, its environment variables persist.


## <a id='services-block'></a> Services

Apps can bind to services such as databases, messaging, and key-value stores.

Apps are deployed into App Spaces. An app can only bind to services instances that exist in the target App Space before the app is deployed.

The `services` block consists of a heading, then one or more service instance names.

Whoever creates the service chooses the service instance names. These names can convey logical information, as in `backend_queue`, describe the nature of the service, as in `mysql_5.x`, or do neither, as in the example below.

<pre>
---
  ...
  services:
   - instance_ABC
   - instance_XYZ
</pre>

Binding to a service instance is a special case of setting an environment variable, namely `VCAP_SERVICES`. See the [Bind a Service](../services/application-binding.html#bind) section of the _Delivering Service Credentials to an App_ topic.




## <a id='deprecated'></a> Deprecated App Manifest Features

These app manifest features have been deprecated in favor of other options, as described below.

<p class="note warning"><strong>WARNING:</strong> Running <code>cf push app -f manifest.yml</code> fails if your manifest uses any of these deprecated features along with the feature that replaces it.</p>

### <a id='yaml-anchors'></a> YAML Anchors Replace Top-Level Attributes

Previously, you could declare top-level attributes, which are also known as global attributes. For example, you can move an attribute above the `applications` block, where it need appear only once.

The following example illustrates how this was used to manage duplicated settings.

<pre>
---
# all apps use these settings and services
domain: shared-domain.example.com
memory: 1G
instances: 1
services:
- clockwork-mysql
applications:
- name: springtock
  host: tock09876
  path: ./spring-music/build/libs/spring-music.war
- name: springtick
  host: tick09875
  path: ./spring-music/build/libs/spring-music.war
</pre>

Now, you can use YAML aliases instead.

The following example illustrates how to declare shared configuration using a YAML anchor, which the manifest refers to in app declarations by using an alias.

<pre>
---
defaults: &amp;defaults
  buildpacks:
    - staticfile_buildpack
  memory: 1G


applications:
- name: bigapp
  &lt;&lt;: *defaults
- name: smallapp
  &lt;&lt;: *defaults
  memory: 256M
</pre>

When pushing the app, make explicit the attributes in each app’s declaration. To do this, assign the anchors and include the app-level attributes with YAML aliases in each app declaration.

### <a id='route-attribute'></a> Attribute routes Replaces domain, domains, host, hosts, and no-hostname

<p class="note"><strong>Note</strong>: These properties are removed in cf CLI v7.</p>

Previously, you could specify routes by listing them all at once using the `routes` attribute, or by using their hosts and domains as shown below.

<pre>
---
applications:
- name: webapp
  host: www
  domains:
  - example.com
  - example.io
</pre>

The following route component attributes have been deprecated:
<ul>
  <li><code>domain</code></li>
  <li><code>domains</code></li>
  <li><code>host</code></li>
  <li><code>hosts</code></li>
  <li><code>no-hostname</code></li>
</ul>

Now you can only specify routes by using the `routes` attribute:

<pre>
---
applications:
- name: webapp
  routes:
  - route: www.example.com/foo
  - route: tcp.example.com:1234
</pre>

This app manifest feature has been deprecated, and a replacement option is under consideration.

### <a id='inheritance-deprecated'></a> Inheritance

This feature has been deprecated, and has been replaced by [Variable Substitution](#variable-substitution).

With inheritance, child manifests inherited configurations from a parent manifest, and the child manifests could use inherited configurations as provided, extend them, or override them. This feature has been deprecated, and has been replaced by [Variable Substitution](#variable-substitution).


### <a id='buildpack-deprecated'></a> Buildpack Field in Manifest Is Deprecated

The singular `buildpack` field in manifests is deprecated. It has been replaced by `buildpacks`, which is now an array which takes as a value [multiple buildpacks](#buildpack).
